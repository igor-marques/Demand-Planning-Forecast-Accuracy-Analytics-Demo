{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "87cb967b",
   "metadata": {
    "papermill": {
     "duration": 0.003098,
     "end_time": "2025-09-26T18:15:57.478687",
     "exception": false,
     "start_time": "2025-09-26T18:15:57.475589",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 0. Context\n",
    "This notebook demonstrates an analytics workflow for joint analysis of monthly sales, rolling forecasts, and forecast accuracy in demand planning. The scenario, dataset, and requirements are inspired by a professional assignment, generalized for learning.\n",
    "\n",
    "**Context**\n",
    "Accurate demand forecasting is essential for inventory management and strategic planning. The core task is to evaluate how well forecasts match realized sales across product categories and locations, and to surface where accuracy is strong or weak over time.\n",
    "\n",
    "**Dataset**\n",
    "\n",
    "The dataset simulates:\n",
    "\n",
    "* Monthly sales by ProductID, LocationID, and month.\n",
    "* Rolling forecast submissions, where each submission month provides forecasts for the next six planned months.\n",
    "* Product and location hierarchies.\n",
    "* All data is artificial and free of company identifiers.\n",
    "\n",
    "**Metric and aggregation logic**\n",
    "\n",
    "* Latest forecast rule: for each ProductID, LocationID, and PlannedMonth, select the forecast with the most recent SubmissionMonth.\n",
    "* Forecast Accuracy %:\n",
    "$ 1-\\frac{\\sum{\\left| Sales - Forecast \\right|}^{}}{\\sum_{}^{}\\left| Forecast \\right|} $\n",
    "Calculated at the product–location–month level, then aggregated.\n",
    "* For monthly trend visuals, the metric is evaluated month by month.\n",
    "\n",
    "**Approach**\n",
    "\n",
    "We will:\n",
    "* Load and inspect the dataset.\n",
    "* Build the “latest forecast” table and align it with sales.\n",
    "* Compute KPIs and accuracy measures.\n",
    "* Visualize trends, rankings by market, and a heatmap by product and region.\n",
    "* Note assumptions and design decisions along the way.\n",
    "\n",
    "**Tools**\n",
    "\n",
    "Python, pandas, numpy, plotly or matplotlib for charts."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1023e00e",
   "metadata": {
    "papermill": {
     "duration": 0.002642,
     "end_time": "2025-09-26T18:15:57.484477",
     "exception": false,
     "start_time": "2025-09-26T18:15:57.481835",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Loading and Inspect the Dataset\n",
    "* Load sales, forecast, product, and location tables.\n",
    "* Concatenate the two sales sheets into one unified table.\n",
    "* Preview the first rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6c46391a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:15:57.491135Z",
     "iopub.status.busy": "2025-09-26T18:15:57.490739Z",
     "iopub.status.idle": "2025-09-26T18:16:01.722204Z",
     "shell.execute_reply": "2025-09-26T18:16:01.721049Z"
    },
    "papermill": {
     "duration": 4.236829,
     "end_time": "2025-09-26T18:16:01.723902",
     "exception": false,
     "start_time": "2025-09-26T18:15:57.487073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   SalesMonth  ProductID  LocationID  Quantity\n",
      "0  01.06.2024     123456        1001       674\n",
      "1  01.06.2024     123456        2001       551\n",
      "2  01.06.2024     123456        3001       115\n",
      "3  01.06.2024     123456        4001       610\n",
      "4  01.06.2024     123456        5001       675\n",
      "  SubmissionMonth PlannedMonth  ProductID  LocationID  Quantity\n",
      "0      01.01.2024   01.02.2024     123456        1001       648\n",
      "1      01.01.2024   01.02.2024     123456        2001       120\n",
      "2      01.01.2024   01.02.2024     123456        3001       294\n",
      "3      01.01.2024   01.02.2024     123456        4001       463\n",
      "4      01.01.2024   01.02.2024     123456        5001       611\n",
      "   ProductID     ProductSubCat        ProductCat\n",
      "0     123456    Clothes Dryers  Major Appliances\n",
      "1     123457          Freezers  Major Appliances\n",
      "2     123458             Ovens  Major Appliances\n",
      "3     123459  Electric Kettles  Minor Appliances\n",
      "4     123460    Clothes Dryers  Major Appliances\n",
      "   LocationID      Country          Region\n",
      "0        1001  Netherlands  Western Europe\n",
      "1        2001        Spain          Iberia\n",
      "2        3001     Portugal          Iberia\n",
      "3        4001   Luxembourg  Western Europe\n",
      "4        5001      Hungary  Eastern Europe\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load sales data\n",
    "sales2024 = pd.read_excel(\"../input/forecast-accuracy-demo-dataset/artificialdata_demand_forecast.xlsx\", sheet_name=\"Sales2024\")\n",
    "sales2025 = pd.read_excel(\"../input/forecast-accuracy-demo-dataset/artificialdata_demand_forecast.xlsx\", sheet_name=\"Sales2025\")\n",
    "\n",
    "# Load forecast data\n",
    "forecast = pd.read_excel(\"../input/forecast-accuracy-demo-dataset/artificialdata_demand_forecast.xlsx\", sheet_name=\"Forecast\")\n",
    "\n",
    "# Load dimensions\n",
    "products = pd.read_excel(\"../input/forecast-accuracy-demo-dataset/artificialdata_demand_forecast.xlsx\", sheet_name=\"Products\")\n",
    "locations = pd.read_excel(\"../input/forecast-accuracy-demo-dataset/artificialdata_demand_forecast.xlsx\", sheet_name=\"Locations\")\n",
    "\n",
    "# Merge sales tables into one\n",
    "sales = pd.concat([sales2024, sales2025], ignore_index=True)\n",
    "\n",
    "# Quick inspection\n",
    "print(sales.head())\n",
    "print(forecast.head())\n",
    "print(products.head())\n",
    "print(locations.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba2657fc",
   "metadata": {
    "papermill": {
     "duration": 0.00246,
     "end_time": "2025-09-26T18:16:01.729180",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.726720",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Data Quality and Structure Checks\n",
    "Before moving into metrics, we confirm data types, missing values, and basic properties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a3d6c03d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:16:01.736144Z",
     "iopub.status.busy": "2025-09-26T18:16:01.735677Z",
     "iopub.status.idle": "2025-09-26T18:16:01.781629Z",
     "shell.execute_reply": "2025-09-26T18:16:01.780288Z"
    },
    "papermill": {
     "duration": 0.051308,
     "end_time": "2025-09-26T18:16:01.783298",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.731990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1560 entries, 0 to 1559\n",
      "Data columns (total 4 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   SalesMonth  1560 non-null   object\n",
      " 1   ProductID   1560 non-null   int64 \n",
      " 2   LocationID  1560 non-null   int64 \n",
      " 3   Quantity    1560 non-null   int64 \n",
      "dtypes: int64(3), object(1)\n",
      "memory usage: 48.9+ KB\n",
      "None\n",
      "SalesMonth    0\n",
      "ProductID     0\n",
      "LocationID    0\n",
      "Quantity      0\n",
      "dtype: int64\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13680 entries, 0 to 13679\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   SubmissionMonth  13680 non-null  object\n",
      " 1   PlannedMonth     13680 non-null  object\n",
      " 2   ProductID        13680 non-null  int64 \n",
      " 3   LocationID       13680 non-null  int64 \n",
      " 4   Quantity         13680 non-null  int64 \n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 534.5+ KB\n",
      "None\n",
      "SubmissionMonth    0\n",
      "PlannedMonth       0\n",
      "ProductID          0\n",
      "LocationID         0\n",
      "Quantity           0\n",
      "dtype: int64\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20 entries, 0 to 19\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   ProductID      20 non-null     int64 \n",
      " 1   ProductSubCat  20 non-null     object\n",
      " 2   ProductCat     20 non-null     object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 612.0+ bytes\n",
      "None\n",
      "ProductID        0\n",
      "ProductSubCat    0\n",
      "ProductCat       0\n",
      "dtype: int64\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6 entries, 0 to 5\n",
      "Data columns (total 3 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   LocationID  6 non-null      int64 \n",
      " 1   Country     6 non-null      object\n",
      " 2   Region      6 non-null      object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 276.0+ bytes\n",
      "None\n",
      "LocationID    0\n",
      "Country       0\n",
      "Region        0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(sales.info()); print(sales.isnull().sum())\n",
    "print(forecast.info()); print(forecast.isnull().sum())\n",
    "print(products.info()); print(products.isnull().sum())\n",
    "print(locations.info()); print(locations.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00e3e728",
   "metadata": {
    "papermill": {
     "duration": 0.002431,
     "end_time": "2025-09-26T18:16:01.788646",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.786215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Date Conversion\n",
    "Convert string-formatted dates into datetime objects for proper time handling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2848c68f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:16:01.795918Z",
     "iopub.status.busy": "2025-09-26T18:16:01.794974Z",
     "iopub.status.idle": "2025-09-26T18:16:01.813183Z",
     "shell.execute_reply": "2025-09-26T18:16:01.811821Z"
    },
    "papermill": {
     "duration": 0.023775,
     "end_time": "2025-09-26T18:16:01.815099",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.791324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sales[\"SalesMonth\"] = pd.to_datetime(sales[\"SalesMonth\"], format=\"%d.%m.%Y\")\n",
    "forecast[\"SubmissionMonth\"] = pd.to_datetime(forecast[\"SubmissionMonth\"], format=\"%d.%m.%Y\")\n",
    "forecast[\"PlannedMonth\"] = pd.to_datetime(forecast[\"PlannedMonth\"], format=\"%d.%m.%Y\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1bedaa2",
   "metadata": {
    "papermill": {
     "duration": 0.002471,
     "end_time": "2025-09-26T18:16:01.820831",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.818360",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Exploratory Stats and Unique Counts\n",
    "Quick checks on volumes and categorical dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2e7b9a39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:16:01.828549Z",
     "iopub.status.busy": "2025-09-26T18:16:01.828216Z",
     "iopub.status.idle": "2025-09-26T18:16:01.848961Z",
     "shell.execute_reply": "2025-09-26T18:16:01.847813Z"
    },
    "papermill": {
     "duration": 0.026919,
     "end_time": "2025-09-26T18:16:01.850868",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.823949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    1560.000000\n",
      "mean      494.162179\n",
      "std       291.146205\n",
      "min         0.000000\n",
      "25%       241.000000\n",
      "50%       490.500000\n",
      "75%       747.000000\n",
      "max       999.000000\n",
      "Name: Quantity, dtype: float64\n",
      "count    13680.000000\n",
      "mean       503.702924\n",
      "std        290.698813\n",
      "min          0.000000\n",
      "25%        251.000000\n",
      "50%        508.000000\n",
      "75%        755.000000\n",
      "max        999.000000\n",
      "Name: Quantity, dtype: float64\n",
      "Unique products in sales: 20\n",
      "Unique locations in sales: 6\n",
      "Unique product categories: ['Major Appliances' 'Minor Appliances']\n",
      "Regions: ['Western Europe' 'Iberia' 'Eastern Europe']\n"
     ]
    }
   ],
   "source": [
    "print(sales[\"Quantity\"].describe())\n",
    "print(forecast[\"Quantity\"].describe())\n",
    "\n",
    "print(\"Unique products in sales:\", sales[\"ProductID\"].nunique())\n",
    "print(\"Unique locations in sales:\", sales[\"LocationID\"].nunique())\n",
    "print(\"Unique product categories:\", products[\"ProductCat\"].unique())\n",
    "print(\"Regions:\", locations[\"Region\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f92df682",
   "metadata": {
    "papermill": {
     "duration": 0.002578,
     "end_time": "2025-09-26T18:16:01.856322",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.853744",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Join Demonstration\n",
    "Merge sales with product and location dimensions to show how the enriched dataset looks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d424fcd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:16:01.863128Z",
     "iopub.status.busy": "2025-09-26T18:16:01.862761Z",
     "iopub.status.idle": "2025-09-26T18:16:01.885234Z",
     "shell.execute_reply": "2025-09-26T18:16:01.883529Z"
    },
    "papermill": {
     "duration": 0.029182,
     "end_time": "2025-09-26T18:16:01.888229",
     "exception": false,
     "start_time": "2025-09-26T18:16:01.859047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  SalesMonth  ProductID  LocationID  Quantity   ProductSubCat  \\\n",
      "0 2024-06-01     123456        1001       674  Clothes Dryers   \n",
      "1 2024-06-01     123456        2001       551  Clothes Dryers   \n",
      "2 2024-06-01     123456        3001       115  Clothes Dryers   \n",
      "3 2024-06-01     123456        4001       610  Clothes Dryers   \n",
      "4 2024-06-01     123456        5001       675  Clothes Dryers   \n",
      "\n",
      "         ProductCat      Country          Region  \n",
      "0  Major Appliances  Netherlands  Western Europe  \n",
      "1  Major Appliances        Spain          Iberia  \n",
      "2  Major Appliances     Portugal          Iberia  \n",
      "3  Major Appliances   Luxembourg  Western Europe  \n",
      "4  Major Appliances      Hungary  Eastern Europe  \n"
     ]
    }
   ],
   "source": [
    "sales_full = (\n",
    "    sales\n",
    "    .merge(products, on=\"ProductID\", how=\"left\")\n",
    "    .merge(locations, on=\"LocationID\", how=\"left\")\n",
    ")\n",
    "print(sales_full.head())"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8353183,
     "sourceId": 13181800,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.569428,
   "end_time": "2025-09-26T18:16:02.513474",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-26T18:15:50.944046",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
